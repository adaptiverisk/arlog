<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The AdaptiveRisk Blog</title>
    <link>https://blog.adaptiverisk.com/categories/xlw/index.xml</link>
    <description>Recent content on The AdaptiveRisk Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://blog.adaptiverisk.com/categories/xlw/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>64bit</title>
      <link>https://blog.adaptiverisk.com/post/2016-12-01-64bit/</link>
      <pubDate>Thu, 01 Dec 2016 00:20:00 +0000</pubDate>
      
      <guid>https://blog.adaptiverisk.com/post/2016-12-01-64bit/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;In this post we describe a technique that allows your Excel addin to
be loadable by 32 bit Excel, but lets you run calculations that require
more than 2GB of RAM.&lt;/p&gt;

&lt;p&gt;Most people in financial industry use 32 bit Excel even though they are running
it on 64 bit Windows. The main reason for this is backward compatibility - if
you have a set of 32 bit addins that you used with previous version of Excel
you&amp;rsquo;ll stick to 32 bit Excel when upgrading. If you want to upgrade to 64 bit
Excel you also need to upgrade all your addins. 32 bit Excel is also
&lt;a href=&#34;https://technet.microsoft.com/en-us/library/ee681792.aspx#Anchor_0&#34;&gt;recomended by Microsoft.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Why would you want 64 bit Excel? The main reason is when your spreadsheets
are massive and require more than 2GB memory when loaded into Excel. It is
also possible to have small spreadsheets but have addins that require
large ammount of memory to accomplish calculations. Remember that the memory that
addins use are in Excels address space which cannot exceed 2GB in 32 bit Excel.&lt;/p&gt;

&lt;p&gt;What do you do if your clients use 32 bit Excel but your addin requires
a lot of memory for calculations? Read further to learn about our approach.&lt;/p&gt;

&lt;h1 id=&#34;calling-64-bit-calculations-from-32-bit-excel&#34;&gt;Calling 64 bit Calculations from 32 bit Excel&lt;/h1&gt;

&lt;p&gt;We use the following workflow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We create a 64 bit executable that takes two arguments as inputs. The arguments
are input and output files. The input file contains data for calculations.
The output file contains result of the calculations. This way our calculations
are performed by 64 bit executable that has access to all available memory.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a 32 bit xll with a function that saves input data from a spreadsheet
into temporary input file, calls 64 bit executable to do calculations and then
load output file to display result in the spreadsheet.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.adaptiverisk.com/downloads/bits.zip&#34;&gt;Download&lt;/a&gt; an example solution that implements this
approach. The rest of the post will describe details of the code in the
solution.&lt;/p&gt;

&lt;h1 id=&#34;example-problem&#34;&gt;Example Problem&lt;/h1&gt;

&lt;p&gt;For an example we consider a useless function that allocates huge vector puts
random numbers into it and then computes mean value.&lt;/p&gt;

&lt;h2 id=&#34;static-library&#34;&gt;Static Library&lt;/h2&gt;

&lt;p&gt;We put the calculation into static library in project &lt;code&gt;bits&lt;/code&gt;. The function that
does the calculations is &lt;code&gt;double func(double x, void(*progress)(double))&lt;/code&gt;.
Notice that to make things more interesting the function accepts callback
pointer to that allows to track function progress. This is usefull when your
function takes long time to compute.&lt;/p&gt;

&lt;p&gt;The library also includes one possible implementation of the progress callback
that displays progress bar in a console.&lt;/p&gt;

&lt;p&gt;Since we are going to save/load data to/from files using json format we
included the header file of an excelent C++
&lt;a href=&#34;https://github.com/nlohmann/js&#34;&gt;json library&lt;/a&gt; by Niels Lohmann.&lt;/p&gt;

&lt;p&gt;Also we created a project &lt;code&gt;bitstest&lt;/code&gt; to unit test implementation of &lt;code&gt;func&lt;/code&gt;.
We used &lt;a href=&#34;https://github.com/philsquared/Catch&#34;&gt;Catch testing framework for C++&lt;/a&gt;
to write our test cases.&lt;/p&gt;

&lt;h2 id=&#34;64-bit-executable&#34;&gt;64 Bit Executable&lt;/h2&gt;

&lt;p&gt;Next we created project &lt;code&gt;bitsexe&lt;/code&gt; to build a 64 bit executable that will
run out calculations. The project has just a single file (&lt;code&gt;main.cpp&lt;/code&gt;) that
only has &lt;code&gt;main&lt;/code&gt; function to read data from input file, call &lt;code&gt;func&lt;/code&gt; and save
data to output file.&lt;/p&gt;

&lt;p&gt;Build this project in &lt;code&gt;Release/x64&lt;/code&gt; configuration. The resulting executable
will be located in &lt;code&gt;Release\x64&lt;/code&gt; folder and later you will need to move it
to same folder where &lt;code&gt;.xll&lt;/code&gt; is located.&lt;/p&gt;

&lt;h2 id=&#34;xll&#34;&gt;XLL&lt;/h2&gt;

&lt;p&gt;Finally we created project &lt;code&gt;xbits&lt;/code&gt; to build &lt;code&gt;.xll&lt;/code&gt; addin using
&lt;a href=&#34;http://xlw.sourceforge.net/&#34;&gt;XLW&lt;/a&gt; framework.&lt;/p&gt;

&lt;p&gt;The projects exports single function to Excel: &lt;code&gt;double myfunc(double x)&lt;/code&gt;.
Remember that when &lt;code&gt;x&lt;/code&gt; is small enough our calculations will fit memory
available in 32 bit Excel. In this case we can call &lt;code&gt;func()&lt;/code&gt; right away
and return the result to Excel.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;x&lt;/code&gt; is large we will be calling 64 bit executable. First we save the
parameter in a temporary file. Next we find directory in which &lt;code&gt;xll&lt;/code&gt; file is
located (using &lt;code&gt;GetXllDirectory()&lt;/code&gt; helper function provided by XLW framework.
We assume that 64 bit executable is located in the same folder. Then we call
&lt;code&gt;system()&lt;/code&gt; function that creates a process for our 64 bit executable. The
executable will read data from temporary input file and will write results to
temporary output file. In our case it will also show progress bar while it does
calculations. Finally we read output file, delete temporary files and return the
results to Excel.&lt;/p&gt;

&lt;h2 id=&#34;instructions&#34;&gt;Instructions&lt;/h2&gt;

&lt;p&gt;To run the example solution you need to do the following steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Build &lt;code&gt;xbits&lt;/code&gt; in &lt;code&gt;x86&lt;/code&gt; configuration (Release or Debug).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build &lt;code&gt;bitsexe&lt;/code&gt; in &lt;code&gt;Release/x64&lt;/code&gt; configuration and copy resulting &lt;code&gt;.exe&lt;/code&gt; file
to &lt;code&gt;Release&lt;/code&gt; or &lt;code&gt;Debug&lt;/code&gt; folder where &lt;code&gt;.xll&lt;/code&gt; is located.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make &lt;code&gt;xbits&lt;/code&gt; an active projects and run it with &lt;code&gt;Ctrl+F5&lt;/code&gt; or &lt;code&gt;F5&lt;/code&gt; (note that
you need to make sure that command for debuging property is set to &lt;code&gt;Excel.exe&lt;/code&gt;
on your computer: i.e. xbits Properties &amp;gt; Configuration Properties &amp;gt; Debugging
&amp;gt; Command should be set to full path of &lt;code&gt;Excel.exe&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>UDF Services (XLW Part 5)</title>
      <link>https://blog.adaptiverisk.com/xll/excel/2015/01/21/xlw-part5.html</link>
      <pubDate>Wed, 21 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.adaptiverisk.com/xll/excel/2015/01/21/xlw-part5.html</guid>
      <description>

&lt;p&gt;In the &lt;a href=&#34;https://blog.adaptiverisk.com/xll/excel/2014/12/19/xlw-part4.html&#34;&gt;last post&lt;/a&gt; I described how to
write functions that can input/output arrays, matrices and ranges. For the
introduction to XLW series take a look at the
&lt;a href=&#34;https://blog.adaptiverisk.com/xll/excel/2014/12/08/xlw-part1.html&#34;&gt;first post&lt;/a&gt;. Today I am going to
describe several useful utilities that are available in XLW. There are many
more utilities that are available but they do not work from UDF and only work
from macros. This is Excel limitation. I will address creating macros
in one of the future posts.&lt;/p&gt;

&lt;p&gt;The starting point of this post is the solution we set up
&lt;a href=&#34;https://blog.adaptiverisk.com/xll/excel/2014/12/19/xlw-part4.html&#34;&gt;previously&lt;/a&gt;. If you don&amp;rsquo;t have set it
up you can &lt;a href=&#34;https://blog.adaptiverisk.com/downloads/xlw-part3-4.zip&#34;&gt;download it&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;1-size-of-calling-range&#34;&gt;1. Size of calling range&lt;/h2&gt;

&lt;p&gt;The calling range is a single cell when you input a scalar formula in Excel.
However, when you use functions that output arrays or matrices, you need to input
formula as an array formula. To do this type a formula as a regular scalar
formula. Then select a range where you want array output to be (the formula
should be in left-top corner or your selection). Then select the formula in
the formula bar and press &lt;code&gt;Ctrl+Shift+Enter&lt;/code&gt;. You will see curly braces
appearing around your formula, this signifies that it is &lt;em&gt;array formula&lt;/em&gt;.
If you perform this operation with a simple scalar formula, then the same
result will be copied to all output cells.&lt;/p&gt;

&lt;p&gt;Sometimes you want to adjust your computations based on the size of output range
that a user selected. The following snippet shows how you can accomplish this:&lt;/p&gt;

&lt;p&gt;Add the following to &lt;code&gt;mylib.cpp&lt;/code&gt;:
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;1
2
3
4
5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;xlw/XlfServices.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ... inside a function:&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nrows&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;XlfServices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Information&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetCallingCell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ncols&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;XlfServices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Information&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetCallingCell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;columns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-abort-function-when-a-user-presses-esc&#34;&gt;2. Abort function when a user presses &lt;code&gt;Esc&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Sometimes calculations in your function might take long time. For example
suppose that your function runs Monte Carlo simulations with number of paths
set by a user. If a user sets number of paths to be very large it might take
too long to compute. It would be nice if there was a way to interrupt these
calculations without killing Excel. Excel users are used to press &lt;code&gt;Esc&lt;/code&gt; key
in these cases. It is up to you to ensure that your function stops computation
when &lt;code&gt;Esc&lt;/code&gt; keypress is registered. To do that XLW provides &lt;code&gt;IsEscPressed&lt;/code&gt;
function:&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;mylib.cpp&lt;/code&gt;:
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;1
2
3
4
5
6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;xlw/XlfExcel&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;XlfExcel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IsEscPressed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;#Aborted&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-parallel-calculations&#34;&gt;3. Parallel Calculations&lt;/h2&gt;

&lt;p&gt;Excel can compute cells in parallel if they are marked as thread safe.
To mark a function as thread safe put the following directive before the
function name in function declaration block:&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;mylib.h&lt;/code&gt;:
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;1
2
3
4
5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Sum of square roots of two numbers&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//&amp;lt;xlw:threadsafe&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;SumSqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//argument 1&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//argument 2&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-timing-functions&#34;&gt;4. Timing Functions&lt;/h2&gt;

&lt;p&gt;It is trivial to add timing to a function, by adding &lt;code&gt;//&amp;lt;xlw:time&lt;/code&gt; directive:&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;mylib.h&lt;/code&gt;:
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;1
2
3
4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Returns number of iterations performed&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//&amp;lt;xlw:time&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;EscInterrupt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//max number of iterations&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;The comment &amp;ldquo;//&amp;lt;xlw:time&amp;rdquo; instructs InterfaceGenerator to produce timing code.
If the function is called with a scalar output, it produces just the original
result. However, if the function is called with 2x2 array as a requested output
(see array formulas in Excel), the bottom right cell of the array will contain
number of seconds it took to compute the function.&lt;/p&gt;

&lt;p&gt;When timing functions returning MyArray, MyMatrix, CellMatrix or XlOper the
timing information is appended to the output from below.&lt;/p&gt;

&lt;h2 id=&#34;5-volatile-functions&#34;&gt;5. Volatile Functions&lt;/h2&gt;

&lt;p&gt;A volatile function is a function whose value can change even if the arguments
have not. Usually you apply volatile directive to a function which depends on
random numbers or time. To specify that a function is volatile add
&lt;code&gt;//&amp;lt;xlw:volatile&lt;/code&gt; before the function&amp;rsquo;s name:&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;mylib.h&lt;/code&gt;:
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;1
2
3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Number of minutes since Jan 1, 2000&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//&amp;lt;xlw:volatile&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;SysTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;In  &lt;code&gt;mylib.c&lt;/code&gt;:
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;SysTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;time_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tm&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y2k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;y2k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tm_hour&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;n&#34;&gt;y2k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tm_min&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y2k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tm_sec&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;y2k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tm_year&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y2k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tm_mon&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y2k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tm_mday&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seconds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;difftime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mktime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y2k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seconds&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;It is also possible to time the volatile function by adding the timing
directive. The order of &lt;code&gt;//&amp;lt;xlw:time&lt;/code&gt; and &lt;code&gt;//&amp;lt;xlw:volatile&lt;/code&gt; directives is not
important.&lt;/p&gt;

&lt;h2 id=&#34;6-calling-add-in-functions-from-vba&#34;&gt;6. Calling add-in functions from VBA&lt;/h2&gt;

&lt;p&gt;A function defined in an add-in can be called from VBA using &lt;code&gt;Application.Run&lt;/code&gt;
function:
&lt;code&gt;&amp;lt;Output Value&amp;gt; = Application.Run(&amp;quot;&amp;lt;function name&amp;gt;&amp;quot;, &amp;lt;input 1&amp;gt;, &amp;lt;input 2&amp;gt;, ... &amp;lt;input N&amp;gt;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Add a module to an Excel file with the following code:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-basic&#34; data-lang=&#34;basic&#34;&gt;1
2
3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;Function&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;vbaOuter1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;As&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;Variant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;vbaOuter1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;Application&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;Run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Outer1&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;vg&#34;&gt;End&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;Function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This will create a VBA function that will behave in a similar way as add-in
defined &lt;code&gt;Outer1&lt;/code&gt; function (aside from the fact that it will lack descriptions
in the function wizard).&lt;/p&gt;

&lt;h2 id=&#34;7-happy-coding&#34;&gt;7. Happy Coding!&lt;/h2&gt;

&lt;p&gt;If you want to see the code described in this post in action you can
&lt;a href=&#34;https://blog.adaptiverisk.com/downloads/xlw-part5.zip&#34;&gt;download updated &lt;code&gt;mylib&lt;/code&gt; library with example xls file&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Input/output arrays, vectors, matrices or ranges (XLW Part 4)</title>
      <link>https://blog.adaptiverisk.com/xll/excel/2014/12/19/xlw-part4.html</link>
      <pubDate>Fri, 19 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.adaptiverisk.com/xll/excel/2014/12/19/xlw-part4.html</guid>
      <description>

&lt;p&gt;In the &lt;a href=&#34;https://blog.adaptiverisk.com/xll/excel/2014/12/19/xlw-part3.html&#34;&gt;last post&lt;/a&gt; I described how to
write simple functions using XLW. For the
introduction to XLW series take a look at the
&lt;a href=&#34;https://blog.adaptiverisk.com/xll/excel/2014/12/08/xlw-part1.html&#34;&gt;first post&lt;/a&gt;. Today I am going to show
how write functions that can input/ouput arrays, vectors, matrices or general
ranges.&lt;/p&gt;

&lt;p&gt;The starting point will be the solution we set up in the
&lt;a href=&#34;https://blog.adaptiverisk.com/xll/excel/2014/12/15/xlw-part2.html&#34;&gt;previous post&lt;/a&gt;. If you don&amp;rsquo;t have set it
up you can &lt;a href=&#34;https://blog.adaptiverisk.com/downloads/xlw-part2.zip&#34;&gt;download it&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;1-numeric-array-input-output&#34;&gt;1. Numeric array input/output&lt;/h2&gt;

&lt;p&gt;The basic types for input or output arrays or matrices of numbers are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MyMatrix&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MyArray&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The difference is that &lt;code&gt;MyMatrix&lt;/code&gt; is two dimensional and &lt;code&gt;MyArray&lt;/code&gt; is one
dimensional. &lt;code&gt;MyArray&lt;/code&gt; is just a typecast to &lt;code&gt;std::vector&amp;lt;double&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example function that takes an array and produces the matrix equal
to outer product of the array with itself:&lt;/p&gt;

&lt;p&gt;Add the following to &lt;code&gt;mylib.h&lt;/code&gt;:
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;1
2
3
4
5
6
7&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;xlw/MyContainers.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xlw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MyMatrix&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Outer product of array with itself&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Outer1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyArray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//array a&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;Add the following to &lt;code&gt;mylib.cpp&lt;/code&gt;:
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyMatrix&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Outer1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyArray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;MyMatrix&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;h3 id=&#34;myarray-and-mymatrix-gotchas&#34;&gt;&lt;code&gt;MyArray&lt;/code&gt; and &lt;code&gt;MyMatrix&lt;/code&gt; Gotchas:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;XLW does not flatten input, so if you try to supply two dimensional
cell range for &lt;code&gt;MyArray&lt;/code&gt; argument, the call to that function will fail. Only
one dimensional column or row range can work for &lt;code&gt;MyArray&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Although both horizontal and vertical cell ranges can be supplied as values
for &lt;code&gt;MyArray&lt;/code&gt;, the output &lt;code&gt;MyArray&lt;/code&gt; is always a column range. So if you need
to output horizontal one-dimensional array use &lt;code&gt;MyMatrix&lt;/code&gt; with one row.&lt;/li&gt;
&lt;li&gt;If a user tries to supply a range with data incompatible with MyMatrix or
MyArray, the function does not run and returns with the message that it failed
to convert input range.&lt;/li&gt;
&lt;li&gt;The input array types should be defined const and passed by referenced
(i.e. &lt;code&gt;const MyArray&amp;amp;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Debug note&lt;/strong&gt;: If during debug of your code the debugger breaks with a
message &lt;code&gt;User breakpoint called from code at ...&lt;/code&gt; and Assembly is shown,
it means that somewhere in the code the MyMatrix or MyArray was written beyond
defined bounds. I.e. the following code would produce such an error:&lt;/li&gt;
&lt;/ul&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;1
2
3
4
5
6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyArray&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;MyArray&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// maximum index for a is 4&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The error is signaled at line 5 (when the function returns), rather than at
  line 4 (when &lt;em&gt;out of range&lt;/em&gt; assignment takes place) - this makes finding this
  bug tricky.&lt;/p&gt;

&lt;h2 id=&#34;2-input-output-matrices-of-mixed-types&#34;&gt;2. Input/output matrices of mixed types&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;CellMatrix&lt;/code&gt; or &lt;code&gt;XlfOper&lt;/code&gt; can be used to input or output matrices of mixed
types. &lt;code&gt;XlfOper&lt;/code&gt; is preferable since it does not need to copy data into
temporary memory, which is especially important for big ranges.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;XlfOper&lt;/code&gt; has the following methods which allow querying data directly from
Excel:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inspectors&lt;/strong&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IsMissing()&lt;/code&gt; - used by Excel to flag a parameter that hasn&amp;rsquo;t been supplied&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IsError()&lt;/code&gt; - is the data an error?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IsRef()&lt;/code&gt; - is the data a reference?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IsSRef()&lt;/code&gt; - is the data a sheet reference?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IsNumber()&lt;/code&gt; - is the data a number?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IsString()&lt;/code&gt; - is the data a string?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IsNil()&lt;/code&gt; - is the data an empty cell?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IsBool()&lt;/code&gt; - is the data a boolean?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IsInt()&lt;/code&gt; - is the data an integer?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IsMulti()&lt;/code&gt; - is the data a matrix?. If multi can use the following methods:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rows()&lt;/code&gt; - number of rows in the matrix&lt;/li&gt;
&lt;li&gt;&lt;code&gt;columns()&lt;/code&gt; - number of columns in the matrix&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(i, j)&lt;/code&gt; - can use bracket notation to set/retrieve values from the matrix&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conversions&lt;/strong&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AsDouble()&lt;/code&gt; to &lt;code&gt;double&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AsRef()&lt;/code&gt; to &lt;code&gt;XlfRef&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AsShort()&lt;/code&gt; to &lt;code&gt;short&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AsBool()&lt;/code&gt; to &lt;code&gt;bool&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AsInt()&lt;/code&gt; to &lt;code&gt;int&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AsULong()&lt;/code&gt; to &lt;code&gt;unsigned long&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AsString()&lt;/code&gt; to &lt;code&gt;char*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AsWstring()&lt;/code&gt; to &lt;code&gt;std::wstring&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AsDoubleVector()&lt;/code&gt; to &lt;code&gt;std::vector&amp;lt;double&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AsArray()&lt;/code&gt; to &lt;code&gt;MyArray&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AsMatrix()&lt;/code&gt; to &lt;code&gt;MyMatrix&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AsCellMatrix()&lt;/code&gt; to &lt;code&gt;CellMatrix&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;Add the following to &lt;code&gt;mylib.h&lt;/code&gt;:
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;1
2
3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;XlfOper&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Squares all numbers and sets all other cells to \&amp;quot;-\&amp;quot;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;SquareNumbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;XlfOper&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//input range&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Input &lt;code&gt;XlfOper&amp;amp;&lt;/code&gt; argument should not be &lt;code&gt;const&lt;/code&gt;, because otherwise
you won&amp;rsquo;t be able to access its elements with &lt;code&gt;(i, j)&lt;/code&gt; notation.&lt;/p&gt;

&lt;p&gt;Add the following to &lt;code&gt;mylib.cpp&lt;/code&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;XlfOper&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;SquareNumbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;XlfOper&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IsMulti&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;XlfOper&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IsNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AsDouble&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;XlfOper&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;columns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;columns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IsNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AsDouble&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;Here is another example how you can populate output range:
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;1
2
3
4
5
6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;XlfOper&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;short&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.23&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;XlfOper&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xlerrValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update 08/19/2016 Gotcha&lt;/strong&gt;
Sometimes, when  you use two dimensional &lt;code&gt;XlfOper&lt;/code&gt; as a return from your
function, instead of your output you see &lt;code&gt;#N\A&lt;/code&gt; in Excel cells. This happens
when one or more of the cells of &lt;code&gt;XlfOper&lt;/code&gt; are left not initialized.
For instance if in the example above you remove the second line
(&lt;code&gt;ret(0, 0) = &amp;quot;abc&amp;quot;;&lt;/code&gt;) the output in Excel will contain &lt;code&gt;#N\A&lt;/code&gt; in every cell
(not just in the first one).&lt;/p&gt;

&lt;h2 id=&#34;3-happy-coding&#34;&gt;3. Happy Coding!&lt;/h2&gt;

&lt;p&gt;If you want to see the code described in this post in action you can
&lt;a href=&#34;https://blog.adaptiverisk.com/downloads/xlw-part3-4.zip&#34;&gt;download updated &lt;code&gt;mylib&lt;/code&gt; library&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing Simple Excel Functions (XLW Part 3)</title>
      <link>https://blog.adaptiverisk.com/xll/excel/2014/12/19/xlw-part3.html</link>
      <pubDate>Fri, 19 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.adaptiverisk.com/xll/excel/2014/12/19/xlw-part3.html</guid>
      <description>

&lt;p&gt;In the &lt;a href=&#34;https://blog.adaptiverisk.com/xll/excel/2014/12/15/xlw-part2.html&#34;&gt;last post&lt;/a&gt; I described how to set
up a Visual Studio solution to build xll addins using XLW.
For the introduction to XLW series take a look at the
&lt;a href=&#34;https://blog.adaptiverisk.com/xll/excel/2014/12/08/xlw-part1.html&#34;&gt;first post&lt;/a&gt;. Today I am going to show
how easy it is to create user defined functions (UDF) for Excel using XLW.&lt;/p&gt;

&lt;p&gt;The starting point will be the solution we set up in the
&lt;a href=&#34;https://blog.adaptiverisk.com/xll/excel/2014/12/15/xlw-part2.html&#34;&gt;previous post&lt;/a&gt;. If you don&amp;rsquo;t have set it
up you can &lt;a href=&#34;https://blog.adaptiverisk.com/downloads/xlw-part2.zip&#34;&gt;download it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The project contains two files that we are going to modify to add new functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;mylib.h&lt;/code&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#ifndef _mylib_h_&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define _mylib_h_&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;xlw/xlw.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//&amp;lt;xlw:libraryname=MyLibrary&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Square root of an argument&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;MySqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//argument&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;mylib.cpp&lt;/code&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;quot;mylib.h&amp;quot;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;MySqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;#Negative argument&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The third file (&lt;code&gt;xlwmylib.cpp&lt;/code&gt;) is autogenerated by the build process.&lt;/p&gt;

&lt;h2 id=&#34;1-library-name&#34;&gt;1. Library Name&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Library Name&lt;/em&gt; is a term XLW uses to tell in which &lt;em&gt;category&lt;/em&gt; you can find your
functions in the &lt;em&gt;Function Wizard&lt;/em&gt;: &lt;br /&gt;
&lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/my-lib-in-wiz.png&#34; alt=&#34;my library in wiz&#34; /&gt;&lt;br /&gt;
The name of the library is specified in the file &lt;code&gt;mylib.h&lt;/code&gt; on the line 6:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//&amp;lt;xlw:libraryname=MyLibrary&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;2-basic-function&#34;&gt;2. Basic Function&lt;/h2&gt;

&lt;p&gt;Consider a function definition, which should be placed in &lt;code&gt;mylib.h&lt;/code&gt; file:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;1
2
3
4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Sum of square roots of two numbers&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;SumSqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//argument 1&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//argument 2&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;dl&gt;
&lt;dt&gt;Line 1&lt;/dt&gt;
&lt;dd&gt;contains type of results the function returns and comment with function
description as it will appear in Excel&amp;rsquo;s function wizard&lt;/dd&gt;
&lt;dt&gt;Line 2&lt;/dt&gt;
&lt;dd&gt;contains the name of the function (Function in Excel will have same name),
and definition of the first argument. The comment is a description of the
argument as it will appear in Excel&amp;rsquo;s function wizard.
&lt;strong&gt;Note:&lt;/strong&gt; if you need to include quotes in description string escape them with
backslash, e.g.: &lt;code&gt;// argument \&amp;quot;1\&amp;quot;&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;Line 3&lt;/dt&gt;
&lt;dd&gt;contains the second argument with its description&lt;/dd&gt;
&lt;dt&gt;Line 4&lt;/dt&gt;
&lt;dd&gt;ends function definition&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;definition&lt;/p&gt;

&lt;h2 id=&#34;3-handling-errors&#34;&gt;3. Handling Errors&lt;/h2&gt;

&lt;p&gt;It is possible to return an error message to Excel from a function. Consider
the example with &lt;code&gt;SumSqrt&lt;/code&gt; function. Put the following code in &lt;code&gt;mylib.cpp&lt;/code&gt;:&lt;/p&gt;

&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;linenos&#34;&gt;&lt;div class=&#34;linenodiv&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;quot;mylib.h&amp;quot;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;SumSqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;#Negative argument&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;dl&gt;
&lt;dt&gt;Line 6&lt;/dt&gt;
&lt;dd&gt;check if any of the arguments is negative&lt;/dd&gt;
&lt;dt&gt;Line 8&lt;/dt&gt;
&lt;dd&gt;if we have a negative argument we throw an error with message
&lt;code&gt;#Negative argument&lt;/code&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;e argument`&lt;/p&gt;

&lt;p&gt;As a result, the Excel function displays string &lt;code&gt;#Negative argument&lt;/code&gt; if any of
the arguments is negative or numeric result if both numbers are non-negative.&lt;/p&gt;

&lt;h2 id=&#34;4-basic-input-output-data-types&#34;&gt;4. Basic input/output data types&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;double&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt; - although it can be used as an input type it cannot be an output type.
Convert it to &lt;code&gt;double&lt;/code&gt; for output.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;5-happy-coding&#34;&gt;5. Happy Coding!&lt;/h2&gt;

&lt;p&gt;If you want to see the code described in this post in action you can
&lt;a href=&#34;https://blog.adaptiverisk.com/downloads/xlw-part3-4.zip&#34;&gt;download updated &lt;code&gt;mylib&lt;/code&gt; library&lt;/a&gt;. It also
contains changes introduced in the next post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up a Project in Visual Studio 2013 and 2015 (XLW Part 2)</title>
      <link>https://blog.adaptiverisk.com/xll/excel/2014/12/15/xlw-part2.html</link>
      <pubDate>Mon, 15 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.adaptiverisk.com/xll/excel/2014/12/15/xlw-part2.html</guid>
      <description>

&lt;p&gt;&lt;b&gt;Update:&lt;/b&gt; Added instructions for VS2015 (2016-07-16)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.adaptiverisk.com/xll/excel/2014/12/08/xlw-part1.html&#34;&gt;The last post&lt;/a&gt; was the introduction to the
series of XLW related posts. Today I will describe how to set up a project with
XLW. XLW comes with an installer that installs the project templates for your
development environment. It is a quick way to start, but you don&amp;rsquo;t have much
control over the process and the project template might not match your
expectation on how project should be arranged.&lt;/p&gt;

&lt;p&gt;XLW consists of the following components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Header files&lt;/li&gt;
&lt;li&gt;Static libraries (debug, release)&lt;/li&gt;
&lt;li&gt;InterfaceGenerator - an executable that takes a C++ header file that
contains special directives and creates a &lt;code&gt;.cpp&lt;/code&gt; file with code that
interfaces your functions with Excel.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;project-setup&#34;&gt;Project Setup&lt;/h2&gt;

&lt;p&gt;I will show how to set up for 32 bit Excel in Visual Studio 2013 Pro
(and Visual Studio 2015). Set up for other environments should be similar.&lt;/p&gt;

&lt;h3 id=&#34;1-create-a-new-workspace&#34;&gt;1. Create a new workspace&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Select menu: &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;New&lt;/code&gt; -&amp;gt; &lt;code&gt;Project...&lt;/code&gt; :&lt;br /&gt;
&lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/file_new_project.png&#34; alt=&#34;New Project menu&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select &lt;code&gt;Other Project Types&lt;/code&gt; -&amp;gt; &lt;code&gt;Visual Studio Solutions&lt;/code&gt; -&amp;gt;
&lt;code&gt;Blank Solution&lt;/code&gt;. Set your workspace location, type name &lt;code&gt;mylib&lt;/code&gt; and click
&lt;code&gt;OK&lt;/code&gt; button :&lt;br /&gt;
&lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/new_solution.png&#34; alt=&#34;New Solution&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-create-a-new-project-in-the-workspace&#34;&gt;2. Create a new project in the workspace&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Right click on the &lt;code&gt;mylib&lt;/code&gt; workspace in the &lt;em&gt;Solution Explorer&lt;/em&gt; and select
&lt;code&gt;Add&lt;/code&gt; -&amp;gt; &lt;code&gt;New Project...&lt;/code&gt; :&lt;br /&gt;
&lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/mylib_new_project.png&#34; alt=&#34;New Project&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select &lt;code&gt;Visual C++&lt;/code&gt; -&amp;gt; &lt;code&gt;Win32&lt;/code&gt; -&amp;gt; &lt;code&gt;Win32 Console Application&lt;/code&gt;, set project
name to &lt;code&gt;xlladdin&lt;/code&gt; and click &lt;code&gt;OK&lt;/code&gt; :&lt;br /&gt;
&lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/xlladdin_project.png&#34; alt=&#34;xlladdin project&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the &lt;em&gt;Overview&lt;/em&gt; page of the &lt;em&gt;Win32 Application Wizard&lt;/em&gt; dialog box choose
the &lt;code&gt;Next&lt;/code&gt; button.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the &lt;em&gt;Application Settings&lt;/em&gt;, under &lt;em&gt;Application type&lt;/em&gt;, select &lt;code&gt;DLL&lt;/code&gt; and
check &lt;code&gt;Empty project&lt;/code&gt; and press &lt;code&gt;Finish&lt;/code&gt; button:&lt;br /&gt;
&lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/application_wizard.png&#34; alt=&#34;Application Wizard&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-download-most-recent-version-of-xlw-and-add-it-to-the-project&#34;&gt;3. Download most recent version of XLW and add it to the project&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Right click on the solution in the &lt;em&gt;Solution Explorer&lt;/em&gt; and select
&lt;code&gt;Open Folder in File Explorer&lt;/code&gt;:&lt;br /&gt;
&lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/open-in-explorer.png&#34; alt=&#34;Open the solution in Explorer&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create &lt;code&gt;thirdparty&lt;/code&gt; folder in the &lt;code&gt;mylib&lt;/code&gt; solution folder. Then create
&lt;code&gt;xlw&lt;/code&gt; folder in &lt;code&gt;mylib\thirdparty&lt;/code&gt;. Create &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;lib&lt;/code&gt;
folders in &lt;code&gt;mylib\thirdparty\xlw&lt;/code&gt;. Finally create &lt;code&gt;xlw&lt;/code&gt; folder in
&lt;code&gt;mylib\thirdparty\xlw\include\xlw&lt;/code&gt;:&lt;br /&gt;
&lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/dir-tree.png&#34; alt=&#34;dir tree&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Head to &lt;a href=&#34;http://sourceforge.net/projects/xlw/&#34;&gt;XLW download page&lt;/a&gt; and
download the most recent version of XLW, but &lt;em&gt;do not install it&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use &lt;a href=&#34;http://www.7-zip.org&#34;&gt;7z&lt;/a&gt; to open the downloaded file as an archive:&lt;br /&gt;
&lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/7z.png&#34; alt=&#34;7z&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Copy header files from the archive&amp;rsquo;s &lt;code&gt;$_OUTDIR\xlw&lt;/code&gt; folder to
&lt;code&gt;mylib\thirdparty\xlw\include\xlw&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Copy library files from the archive&amp;rsquo;s &lt;code&gt;xlw\lib&lt;/code&gt; folder to
&lt;code&gt;mylib\thirdparty\xlw\lib&lt;/code&gt;. Select library files that correspond to your
environment. In the case of Visual Studio 2013 you need to choose files
that start with &lt;code&gt;xlw-vc120-mt&lt;/code&gt;:
    * &lt;code&gt;xlw-vc120-mt-5_0_2f0.lib&lt;/code&gt;
    * &lt;code&gt;xlw-vc120-mt-gd-5_0_2f0.lib&lt;/code&gt;
    * &lt;code&gt;xlw-vc120-mt-gd-5_0_2f0.pdb&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At this moment the distribution does not contain libraries for
Visual Studio 2015. You can download 5.0.2 version from
&lt;a href=&#34;https://blog.adaptiverisk.com/downloads/xlw.zip&#34;&gt;here&lt;/a&gt; (together with Visual Studio 2013 libraries
and include files and &lt;code&gt;InterfaceGenerator.exe&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Rename these library files to remove version (&lt;code&gt;-5_0_2f0&lt;/code&gt;) from their names.
This will enable you to update to a new version by just replacing the files
without modifying solution build settings. I also create file with name
corresponding to library version, so it is easier to track versions. I.e.
I put &lt;code&gt;5_0_2f0.txt&lt;/code&gt; in &lt;code&gt;lib&lt;/code&gt; folder.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Finally copy &lt;code&gt;InterfaceGenerator.exe&lt;/code&gt; from the archive&amp;rsquo;s
&lt;code&gt;xlw\build\vc12\Release&lt;/code&gt; folder to &lt;code&gt;mylib\thirdparty\xlw&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;4-configure-build-for-all-configurations&#34;&gt;4. Configure build for &lt;em&gt;All Configurations&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Right click on &lt;code&gt;xlladdin&lt;/code&gt; in the &lt;em&gt;Solution Explorer&lt;/em&gt;, select &lt;code&gt;Properties&lt;/code&gt;:&lt;br /&gt;
  &lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/xlladdin-properties.png&#34; alt=&#34;xlladdin Properties&#34; /&gt;&lt;br /&gt;
  Then select &lt;em&gt;All Configurations&lt;/em&gt;:&lt;br /&gt;
  &lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/all-config.png&#34; alt=&#34;set configuration -&amp;gt; all&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;On the &lt;em&gt;Configuration Properties/General&lt;/em&gt; sheet set &lt;code&gt;Target Extension&lt;/code&gt; to
&lt;code&gt;.xll&lt;/code&gt;:&lt;br /&gt;
&lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/set-xll-ext.png&#34; alt=&#34;set extension to .xll&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the &lt;em&gt;Configuration Properties/Debugging&lt;/em&gt; sheet set:&lt;br /&gt;
&lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/debug-config.png&#34; alt=&#34;set debugging options&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Command&lt;/code&gt; to &lt;code&gt;OFFICE_PATH\excel.exe&lt;/code&gt; (where &lt;code&gt;OFFICE_PATH&lt;/code&gt; is a path
to your installation of Microsoft Office (in my case it is
&lt;code&gt;C:\Program Files (x86)\Microsoft Office\Office15\EXCEL.EXE&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Command Arguments&lt;/code&gt; to &lt;code&gt;$(TargetPath)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the &lt;em&gt;C/C++&lt;/em&gt; sheet (&lt;em&gt;Note&lt;/em&gt;: if you don&amp;rsquo;t have this sheet add an empty
&lt;code&gt;mylib.cpp&lt;/code&gt; file to your project) set &lt;code&gt;Additional Include Directories&lt;/code&gt; to
&lt;code&gt;$(SolutionDir)thirdparty\xlw\include;%(AdditionalIncludeDirectories)&lt;/code&gt;:&lt;br /&gt;
&lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/include-dirs.png&#34; alt=&#34;additional include dirs&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the &lt;em&gt;Linker&lt;/em&gt; sheet set &lt;code&gt;Additional Library Directories&lt;/code&gt; to
&lt;code&gt;$(SolutionDir)thirdparty\xlw\lib\;%(AdditionalLibraryDirectories)&lt;/code&gt;:&lt;br /&gt;
&lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/lib-dirs.png&#34; alt=&#34;additional lib dirs&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;5-configure-build-for-debug&#34;&gt;5. Configure build for &lt;em&gt;Debug&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Select &lt;em&gt;Debug&lt;/em&gt; configuration:&lt;br /&gt;
  &lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/config-debug.png&#34; alt=&#34;set configuration -&amp;gt; debug&#34; /&gt;&lt;br /&gt;
  Add &lt;code&gt;xlw-vc120-mt-gd.lib&lt;/code&gt; (&lt;code&gt;xlw-vc140-mt-gd.lib&lt;/code&gt; for VS2015) to the
  &lt;code&gt;Additional Dependencies&lt;/code&gt; on the &lt;em&gt;Linker-&amp;gt;Input&lt;/em&gt; sheet:&lt;br /&gt;
  &lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/debug-lib.png&#34; alt=&#34;set debug lib&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;6-configure-build-for-release&#34;&gt;6. Configure build for &lt;em&gt;Release&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Select &lt;em&gt;Release&lt;/em&gt; configuration:&lt;br /&gt;
  &lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/config-release.png&#34; alt=&#34;set configuration -&amp;gt; release&#34; /&gt;&lt;br /&gt;
  Add &lt;code&gt;xlw-vc120-mt.lib&lt;/code&gt; (&lt;code&gt;xlw-vc140-mt.lib&lt;/code&gt; for VS2015) to the
  &lt;code&gt;Additional Dependencies&lt;/code&gt; on the &lt;em&gt;Linker-&amp;gt;Input&lt;/em&gt; sheet:&lt;br /&gt;
  &lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/release-lib.png&#34; alt=&#34;set release lib&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;7-add-initial-content&#34;&gt;7. Add initial content&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create three empty files in the &lt;code&gt;xlladdin&lt;/code&gt; project folder:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mylib.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mylib.cpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xlwmylib.cpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the following content to &lt;code&gt;mylib.h&lt;/code&gt;:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#ifndef _mylib_h_&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define _mylib_h_&lt;/span&gt;


&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;xlw/xlw.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//&amp;lt;xlw:libraryname=MyLibrary&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Square root of an argument&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;MySqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//argument&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the following content to &lt;code&gt;mylib.cpp&lt;/code&gt;:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;quot;mylib.h&amp;quot;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;MySqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;#Negative argument&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;8-set-up-custom-build-step-to-generate-xlwmylib-cpp&#34;&gt;8. Set up custom build step to generate &lt;code&gt;xlwmylib.cpp&lt;/code&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In the &lt;em&gt;Solution Explorer&lt;/em&gt; right click on &lt;code&gt;mylib.h&lt;/code&gt; and select &lt;code&gt;Properties&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the properties dialog box set configuration to &lt;code&gt;All Configurations&lt;/code&gt;:&lt;br /&gt;
&lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/all-config.png&#34; alt=&#34;set configuration -&amp;gt; all&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On &lt;em&gt;General&lt;/em&gt; sheet set &lt;code&gt;Item Type&lt;/code&gt; to &lt;code&gt;Custom Build Tool&lt;/code&gt; and hit &lt;code&gt;Apply&lt;/code&gt;:&lt;br /&gt;
&lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/custom-type.png&#34; alt=&#34;set custom build type&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On &lt;em&gt;Custom Build Tool&lt;/em&gt; sheet (which appears after you hit &lt;code&gt;Apply&lt;/code&gt; in the
previous step) set the following (also make sure that the configuration is
still set to &lt;code&gt;All Configurations&lt;/code&gt;):&lt;br /&gt;
&lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/custom-build-tool.png&#34; alt=&#34;custom build tool&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Command Line&lt;/code&gt; to
&lt;code&gt;$(SolutionDir)thirdparty\xlw\InterfaceGenerator.exe %(FullPath)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Description&lt;/code&gt; to &lt;code&gt;Generating xlw%(Filename).cpp&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Outputs&lt;/code&gt; to &lt;code&gt;$(ProjectDir)xlw%(Filename).cpp;%(Outputs)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Execute Before&lt;/code&gt; to &lt;code&gt;PreBuildEvent&lt;/code&gt; (this might be grayed out. Look at next
step)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you were not able to set &lt;code&gt;Execute Before&lt;/code&gt; to &lt;code&gt;PreBuildEvent&lt;/code&gt; on
the &lt;em&gt;Custom Build Tool&lt;/em&gt; page for the &lt;code&gt;mylib.h&lt;/code&gt; file open &lt;em&gt;Properties&lt;/em&gt; dialog
for the &lt;code&gt;xlladdin&lt;/code&gt; project (right click on it and select &lt;code&gt;Properties&lt;/code&gt;), and
then head to the &lt;em&gt;Custom Build Step&lt;/em&gt; sheet. Set &lt;code&gt;Execute Before&lt;/code&gt; to
&lt;code&gt;PreBuildEvent&lt;/code&gt;:&lt;br /&gt;
&lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/custom-build-step.png&#34; alt=&#34;custom build step&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;9-test-addin-creation&#34;&gt;9. Test addin creation&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Set to reload files in Visual Studio automatically. Click on main menu
&amp;lsquo;TOOLS&amp;rsquo; -&amp;gt; &amp;lsquo;Options&amp;hellip;&amp;rsquo; and check &lt;code&gt;Auto-load changes, if saved&lt;/code&gt; on the
&lt;em&gt;Environment/Document&lt;/em&gt; sheet:&lt;br /&gt;
&lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/autoload.png&#34; alt=&#34;autoload&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Press &lt;code&gt;F5&lt;/code&gt; - the addin will be compiled and loaded in Excel (accept
Excel&amp;rsquo;s security warnings by pressing
&lt;code&gt;Enable the add-in for this session only&lt;/code&gt;). If you see an error that the
file&amp;rsquo;s content is not recognized - you are trying to open your 32 bit addin in
64 bit Excel.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a new spreadsheet and go to the &lt;em&gt;Funciton wizard&lt;/em&gt;:&lt;br /&gt;
&lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/start-func-wiz.png&#34; alt=&#34;start function wizart&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Find &lt;em&gt;MyLibrary&lt;/em&gt;:&lt;br /&gt;
&lt;img src=&#34;https://blog.adaptiverisk.com/images/xlw2/my-lib-in-wiz.png&#34; alt=&#34;my library in wiz&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select &lt;em&gt;MySqrt&lt;/em&gt; function and put &lt;code&gt;3&lt;/code&gt; as an argument.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Save spreadsheet and exit Excel.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;10-debugging&#34;&gt;10. Debugging&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Press &lt;code&gt;F5&lt;/code&gt; - Excel will start and load the addin.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open the spreadsheet saved in previous section.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Put a breakpoint on &lt;code&gt;if(x &amp;lt; 0.)&lt;/code&gt; line in &lt;code&gt;mylib.cpp&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select a cell with &lt;code&gt;MySqrt&lt;/code&gt; function and press &lt;code&gt;Enter&lt;/code&gt; to run it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The code will stop on the breakpoint.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;11-happy-coding&#34;&gt;11. Happy coding!&lt;/h3&gt;

&lt;p&gt;If you don&amp;rsquo;t have patience to go over these steps, just
&lt;a href=&#34;https://blog.adaptiverisk.com/downloads/xlw-part2.zip&#34;&gt;download the &lt;code&gt;mylib&lt;/code&gt; solution&lt;/a&gt;
(or &lt;a href=&#34;https://blog.adaptiverisk.com/downloads/xlw-part2-2015.zip&#34;&gt;VS2015 version&lt;/a&gt;), open it in
Visual Studio and press &lt;code&gt;F5&lt;/code&gt; key. If your Excel is not installed in
&lt;code&gt;C:\Program Files (x86)\Microsoft Office\Office15\EXCEL.EXE&lt;/code&gt; you will need
to adjust the path as described in
&lt;a href=&#34;#configure-build-for-all-configurations&#34;&gt;Section 4&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Excel Add-ins (XLW Part 1)</title>
      <link>https://blog.adaptiverisk.com/xll/excel/2014/12/08/xlw-part1.html</link>
      <pubDate>Mon, 08 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.adaptiverisk.com/xll/excel/2014/12/08/xlw-part1.html</guid>
      <description>

&lt;p&gt;This is a first post from a series devoted to building xll add-ins for Excel.&lt;/p&gt;

&lt;p&gt;Add-ins are used to extend Excel functionality. It is possible to extend Excel
using VBA in the same spreadsheet. However this way VBA code is tightly coupled
with the spreadsheet, which makes it difficult to keep track of code
versions or update code for all copies of a spreadsheet.&lt;/p&gt;

&lt;p&gt;Users often make copies of spreadsheets because they want to modify something
but want to keep original around. Unfortunately it is never clear what they
modify - it can be data, code or both. As a result often there are many slightly
different spreadsheets floating around. In this scenario updating your code
to fix a bug or add an enhancement if almost impossible.&lt;/p&gt;

&lt;p&gt;Add-ins let us separate code from spreadsheet data. This allows us to resolve
all problems that we encounter when using spreadsheets with embedded code.&lt;/p&gt;

&lt;h2 id=&#34;ways-to-build-an-add-in-for-excel&#34;&gt;Ways to build an add-in for Excel&lt;/h2&gt;

&lt;p&gt;There are many ways to build add-ins. Here is a list of of the ways that I
have tried (I prefer open source or at least free tools):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;VBA&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;: You just need Excel and don&amp;rsquo;t need to install any other tool - it
includes VBE (Visual Basic Editor).
VBE is a decent development environment with integrated debugger.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;: VBA is often quite slow. VBE is not very customizable. The code
lives inside add-in, which prevents regular use of source control with it.
Source code is available to any user (it is trivial to remove password
protection if you set up one).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://exceldna.codeplex.com&#34;&gt;Excel-DNA&lt;/a&gt;&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;: Mature and free environment to develop add-ins using C#. It has
very good documentation and active support forum.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;: C# is not available on all platforms (so if your code needs to run
from Excel as well as on a server this might be an obstacle). Even though
it is possible to call unmanaged dll&amp;rsquo;s from C# setting up development and
debugging process is challenging.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://xlw.sourceforge.net&#34;&gt;XLW&lt;/a&gt;&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pros&lt;/strong&gt;: Thin wrapper for Excel C API - easy to setup, use, debug. Very
fast. Can be used with C++, C# or VB.NET&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cons&lt;/strong&gt;: The documentation is not well maintained and not very detailed.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are a fan of C# take a close look at Excel-DNA. If you prefer using C/C++
XLW is a better alternative. For my projects I prefer to use C/C++. I create
simple C-type dll or static library with core functions. The library can be used
in any other environment (Matlab, Mathematica, VBA, etc.). Then I use XLW
wrapper to interface the functions with Excel.&lt;/p&gt;

&lt;h2 id=&#34;topics&#34;&gt;Topics&lt;/h2&gt;

&lt;p&gt;In this series of posts I plan to cover the following topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.adaptiverisk.com/xll/excel/2014/12/15/xlw-part2.html&#34;&gt;Setting up a project with XLW&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.adaptiverisk.com/xll/excel/2014/12/19/xlw-part3.html&#34;&gt;Writing simple functions callable from Excel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.adaptiverisk.com/xll/excel/2014/12/19/xlw-part3.html#3-handling-errors&#34;&gt;Handling and reporting errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.adaptiverisk.com/xll/excel/2014/12/19/xlw-part4.html&#34;&gt;Input/output arrays, vectors, matrices or ranges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.adaptiverisk.com/xll/excel/2015/01/21/xlw-part5.html#2-abort-function-when-a-user-presses-esc&#34;&gt;Let user interrupt long calculations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.adaptiverisk.com/xll/excel/2015/01/21/xlw-part5.html#4-timing-functions&#34;&gt;Timing functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Logging.&lt;/li&gt;
&lt;li&gt;Adding help to your add-in.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.adaptiverisk.com/xll/c++/2016/10/04/deploy-static.html&#34;&gt;Deployment tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Writing macros.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As I go over these topics I will share the best practices that I converged to
over the years of using XLW to write add-ins.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
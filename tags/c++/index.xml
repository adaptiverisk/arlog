<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c&#43;&#43; on The AdaptiveRisk Blog</title>
    <link>https://blog.adaptiverisk.com/tags/c&#43;&#43;/</link>
    <description>Recent content in c&#43;&#43; on The AdaptiveRisk Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 22 Aug 2023 00:20:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.adaptiverisk.com/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DataSlicer - DataFrame for Excel</title>
      <link>https://blog.adaptiverisk.com/post/2023-08-22-dataslicer/</link>
      <pubDate>Tue, 22 Aug 2023 00:20:00 +0000</pubDate>
      
      <guid>https://blog.adaptiverisk.com/post/2023-08-22-dataslicer/</guid>
      <description>Introducing DataSlicer Add-In: Advanced Data Analysis in Excel DataSlicer brings over a hundred functions from the pandas DataFrames right into Excel, enhancing your data analysis capabilities. As an early prototype, we&amp;rsquo;re actively seeking feedback to refine its features and functionality. As we continue to enhance the user experience, we&amp;rsquo;re also in the process of adding new functions and refining our API. We would appreciate your insights and suggestions; please drop us a line at info@adaptiverisk.</description>
    </item>
    
    <item>
      <title>64bit</title>
      <link>https://blog.adaptiverisk.com/post/2016-12-01-64bit/</link>
      <pubDate>Thu, 01 Dec 2016 00:20:00 +0000</pubDate>
      
      <guid>https://blog.adaptiverisk.com/post/2016-12-01-64bit/</guid>
      <description>Introduction In this post we describe a technique that allows your Excel addin to be loadable by 32 bit Excel, but lets you run calculations that require more than 2GB of RAM.
Most people in financial industry use 32 bit Excel even though they are running it on 64 bit Windows. The main reason for this is backward compatibility - if you have a set of 32 bit addins that you used with previous version of Excel you&amp;rsquo;ll stick to 32 bit Excel when upgrading.</description>
    </item>
    
    <item>
      <title>Deployment Blues</title>
      <link>https://blog.adaptiverisk.com/xll/c&#43;&#43;/2016/10/04/deploy-static.html</link>
      <pubDate>Tue, 04 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.adaptiverisk.com/xll/c&#43;&#43;/2016/10/04/deploy-static.html</guid>
      <description>Introduction It happens often: you compile your xll addin and give it to yor client just to hear them complaining that they cannot load the xll into Excel. The error that they see is: &amp;ldquo;The file you are trying to open, &amp;lsquo;MyAddin.xll&amp;rsquo;, is in a different format than specified by the file extension. Verify that the file is not corrupted and is in from a trusted source before opening the file.</description>
    </item>
    
    <item>
      <title>Time Stamp Your Library</title>
      <link>https://blog.adaptiverisk.com/xll/c&#43;&#43;/2016/08/20/timestamp.html</link>
      <pubDate>Sat, 20 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.adaptiverisk.com/xll/c&#43;&#43;/2016/08/20/timestamp.html</guid>
      <description>When you distribute your program, library, or xll addin it is usefull to have a function that can tell you when your project was compiled. This way you can ensure that the new program, library, or xll addin is correctly installed on a user&amp;rsquo;s system. In this post I will describe how to set up such function in your Visual Studio C++ project.
  Create timestamp.h with the following content: 1 2 3  #include &amp;lt;string&amp;gt;std::string TestTimeStamp();</description>
    </item>
    
  </channel>
</rss>